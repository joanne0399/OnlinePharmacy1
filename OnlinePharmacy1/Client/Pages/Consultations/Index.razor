@page "/consultations/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable

<h3 class="card-title">Consultations</h3>
<br />

<a href="/consultations/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Consultation
</a>
<br />
<br />

@if (Consultations == null)
{
    <div class="alert alert-info">Loading Consultations...</div>
}

else
{
    <table class="table table-responsive" id="consultationsTable">
        <thead>
            <tr>
                <th>Patients</th>
                <th>Date & Time</th>
                <th>Diagnosis</th>
                <th>Consulted by</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var consultation in Consultations)
            {
                <tr>
                    <td>@consultation.Customer.CustomerName</td>
                    <td>@consultation.ConsultationDateTime</td>
                    <td>@consultation.Diagnosis</td>
                    <td>@consultation.Staff.StaffName</td>
                    <td>
                        <a href="/consultations/view/@consultation.ConsultationID" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/consultations/edit/@consultation.ConsultationID" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(consultation.ConsultationID))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Consultation> Consultations;

    protected async override Task OnInitializedAsync()
    {
        //_interceptor.MonitorEvent();
        Consultations = await _client.GetFromJsonAsync<List<Consultation>>($"{Endpoints.ConsultationsEndpoint}");
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#consultationsTable");
    }
    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#consultationsTable");
    }
    async Task Delete(int consultationId)
    {
        var consultation = Consultations.First(q => q.ConsultationID == consultationId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {consultation.ConsultationID}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ConsultationsEndpoint}/{consultationId}");
            await OnInitializedAsync();
        }
    }



}